!function(){function pathTo(node){for(var curr=node,path=[];curr.parent;)path.push(curr),curr=curr.parent;return path.reverse()}function getHeap(){return new BinaryHeap(function(node){return node.f})}function Graph(gridIn,options){options=options||{},this.nodes=[],this.diagonal=!!options.diagonal,this.grid=[];for(var x=0;x<gridIn.length;x++){this.grid[x]=[];for(var y=0,row=gridIn[x];y<row.length;y++){var node=new GridNode(x,y,row[y]);this.grid[x][y]=node,this.nodes.push(node)}}}function GridNode(x,y,weight){this.x=x,this.y=y,this.weight=weight}function BinaryHeap(scoreFunction){this.content=[],this.scoreFunction=scoreFunction}var astar={init:function(graph){for(var i=0,len=graph.nodes.length;len>i;++i){var node=graph.nodes[i];node.f=0,node.g=0,node.h=0,node.visited=!1,node.closed=!1,node.parent=null}},search:function(graph,start,end,options){astar.init(graph),options=options||{};var heuristic=options.heuristic||astar.heuristics.manhattan,closest=options.closest||!1,openHeap=getHeap(),closestNode=start;for(start.h=heuristic(start,end),openHeap.push(start);openHeap.size()>0;){var currentNode=openHeap.pop();if(currentNode===end)return pathTo(currentNode);currentNode.closed=!0;for(var neighbors=graph.neighbors(currentNode),i=0,il=neighbors.length;il>i;++i){var neighbor=neighbors[i];if(!neighbor.closed&&!neighbor.isWall()){var gScore=currentNode.g+neighbor.getCost(currentNode),beenVisited=neighbor.visited;(!beenVisited||gScore<neighbor.g)&&(neighbor.visited=!0,neighbor.parent=currentNode,neighbor.h=neighbor.h||heuristic(neighbor,end),neighbor.g=gScore,neighbor.f=neighbor.g+neighbor.h,closest&&(neighbor.h<closestNode.h||neighbor.h===closestNode.h&&neighbor.g<closestNode.g)&&(closestNode=neighbor),beenVisited?openHeap.rescoreElement(neighbor):openHeap.push(neighbor))}}}return closest?pathTo(closestNode):[]},heuristics:{manhattan:function(pos0,pos1){var d1=Math.abs(pos1.x-pos0.x),d2=Math.abs(pos1.y-pos0.y);return d1+d2},diagonal:function(pos0,pos1){var D=1,D2=Math.sqrt(2),d1=Math.abs(pos1.x-pos0.x),d2=Math.abs(pos1.y-pos0.y);return D*(d1+d2)+(D2-2*D)*Math.min(d1,d2)}}};Graph.prototype.neighbors=function(node){var ret=[],x=node.x,y=node.y,grid=this.grid;return grid[x-1]&&grid[x-1][y]&&ret.push(grid[x-1][y]),grid[x+1]&&grid[x+1][y]&&ret.push(grid[x+1][y]),grid[x]&&grid[x][y-1]&&ret.push(grid[x][y-1]),grid[x]&&grid[x][y+1]&&ret.push(grid[x][y+1]),this.diagonal&&(grid[x-1]&&grid[x-1][y-1]&&ret.push(grid[x-1][y-1]),grid[x+1]&&grid[x+1][y-1]&&ret.push(grid[x+1][y-1]),grid[x-1]&&grid[x-1][y+1]&&ret.push(grid[x-1][y+1]),grid[x+1]&&grid[x+1][y+1]&&ret.push(grid[x+1][y+1])),ret},Graph.prototype.toString=function(){for(var rowDebug,row,y,l,graphString=[],nodes=this.grid,x=0,len=nodes.length;len>x;x++){for(rowDebug=[],row=nodes[x],y=0,l=row.length;l>y;y++)rowDebug.push(row[y].weight);graphString.push(rowDebug.join(" "))}return graphString.join("\n")},GridNode.prototype.toString=function(){return"["+this.x+" "+this.y+"]"},GridNode.prototype.getCost=function(){return this.weight},GridNode.prototype.isWall=function(){return 0===this.weight},BinaryHeap.prototype={push:function(element){this.content.push(element),this.sinkDown(this.content.length-1)},pop:function(){var result=this.content[0],end=this.content.pop();return this.content.length>0&&(this.content[0]=end,this.bubbleUp(0)),result},remove:function(node){var i=this.content.indexOf(node),end=this.content.pop();i!==this.content.length-1&&(this.content[i]=end,this.scoreFunction(end)<this.scoreFunction(node)?this.sinkDown(i):this.bubbleUp(i))},size:function(){return this.content.length},rescoreElement:function(node){this.sinkDown(this.content.indexOf(node))},sinkDown:function(n){for(var element=this.content[n];n>0;){var parentN=(n+1>>1)-1,parent=this.content[parentN];if(!(this.scoreFunction(element)<this.scoreFunction(parent)))break;this.content[parentN]=element,this.content[n]=parent,n=parentN}},bubbleUp:function(n){for(var length=this.content.length,element=this.content[n],elemScore=this.scoreFunction(element);;){var child1Score,child2N=n+1<<1,child1N=child2N-1,swap=null;if(length>child1N){var child1=this.content[child1N];child1Score=this.scoreFunction(child1),elemScore>child1Score&&(swap=child1N)}if(length>child2N){var child2=this.content[child2N],child2Score=this.scoreFunction(child2);(null===swap?elemScore:child1Score)>child2Score&&(swap=child2N)}if(null===swap)break;this.content[n]=this.content[swap],this.content[swap]=element,n=swap}}},window.astar=astar,window.Graph=Graph}();